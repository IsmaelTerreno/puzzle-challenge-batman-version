{"version":3,"sources":["assets/diamond.jpg","assets/star.jpg","redux/reducers/level.ts","redux/helpers.ts","redux/reducers/game.ts","components/PositionBlock.tsx","components/LevelProgress.tsx","components/ScoreInfo.tsx","components/LevelDrawer.tsx","components/MessageGame.tsx","components/Labyrinth.tsx","App.tsx","serviceWorker.ts","redux/reducers/score.ts","redux/reducers/index.ts","redux/store/configureStore.ts","utils.ts","index.tsx"],"names":["module","exports","KEYBOARD_SUPPORT","POSITION_ROW_TYPE","LEVEL_ACTIONS","typedAction","type","payload","restartToFirstLevel","RESTART_TO_FIRST_LEVEL","LEVELS","matrix","columns","freeSpace","obstacle","startLocation","row","column","finishLocation","currentLocation","leftMovements","startState","levels","currentLevelNumber","level","initState","_objectSpread","GAME_ACTIONS","useStyles","makeStyles","root","minHeight","minWidth","PositionBlock","_ref","positionType","isCurrentPosition","isWinner","isLoser","classes","isFinishPosition","finishPosition","positionInfo","position","currentPosition","classCss","title","startPosition","getStyleAndTitlePosition","___EmotionJSX","Grid","container","direction","alignItems","justifyContent","spacing","item","Card","className","CardContent","Avatar","src","diamond","currentLevel","textAlign","boxLevel","width","LevelProgress","currenLevel","Typography","variant","LinearProgress","value","difference","length","Math","round","getProgress","marginTop","marginBottom","padding","ScoreInfo","completedGames","results","levelNumber","wins","filter","r","winner","loses","hasCompletedGames","amount","starts","i","push","starIcon","key","getStars","Button","color","href","target","table","overflow","backgroundColor","movesLeftSection","background","border","tableCell","LevelDrawerContainer","connect","state","score","game","TableContainer","Table","aria-label","TableBody","map","idx","TableRow","idx2","isStartPosition","isWinnerPlayer","isLoserPlayer","TableCell","setMessageLevel","message","SET_LEVEL_MESSAGE","mapDispatchToProps","MessageGameContainer","Dialog","open","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","onClick","Labyrinth","React","App","Container","maxWidth","Boolean","window","location","hostname","match","SCORE_ACTIONS","addResultGame","result","ADD_PLAYER_RESULTS","rootReducer","combineReducers","arguments","undefined","action","SET_PLAYER_LOCATION","DECREMENT_PLAYER_LEFT_MOVEMENTS","MOVE_PLAYER_LOCATION","GO_TO_LEVEL","concat","_toConsumableArray","ADD_COMPLETED_GAME","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","getNewPositionMovement","keyboardEvent","nextPosition","limitRows","limitCols","isObstacle","nextLocation","isValidColumnMovement","isOnColumnLevelLimits","isValidRowMovement","isOnRowLevelLimits","keyCode","right","nextRightLocation","left","nextLeftLocation","down","nextDownLocation","up","nextUpLocation","hasNextLevel","addEventListener","event","Object","values","includes","getState","dispatch","setTimeout","goToLevel","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,8ICE/BC,EAOAC,EAQAC,E,gHCZL,SAASC,EAAYC,EAAcC,GACxC,MAAO,CAAED,OAAMC,YDChB,SALWL,OAAgB,gBAAhBA,IAAgB,YAAhBA,IAAgB,kBAAhBA,IAAgB,gBAK3B,CALWA,MAAgB,KAa3B,SANWC,OAAiB,uBAAjBA,IAAiB,yBAAjBA,IAAiB,mCAAjBA,IAAiB,qCAAjBA,IAAiB,iCAM5B,CANWA,MAAiB,KAc5B,SANWC,KAAa,sDAAbA,EAAa,gCAAbA,EAAa,kDAAbA,EAAa,gDAAbA,EAAa,wEAMxB,CANWA,MAAa,KAQlB,IAIMI,EAAsB,WACjC,OAAOH,EAAYD,EAAcK,uBAAwB,OAqJ9CC,EAAS,CApIe,CACnCC,OAAQ,CACN,CACEC,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,YAElJ,CACED,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAE/I,CACEF,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAE/I,CACEF,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAEjJ,CACEF,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,aAGlJE,cAAe,CACbC,IAAK,EACLC,OAAQ,GAEVC,eAAgB,CACdF,IAAK,EACLC,OAAQ,GAEVE,gBAAiB,CACfH,IAAK,EACLC,OAAQ,GAEVG,cAAe,IAGoB,CACnCT,OAAQ,CACN,CACEC,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,YAElJ,CACED,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAE/I,CACEF,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAE/I,CACEF,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAEjJ,CACEF,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,aAGlJE,cAAe,CACbC,IAAK,EACLC,OAAQ,GAEVC,eAAgB,CACdF,IAAK,EACLC,OAAQ,GAEVE,gBAAiB,CACfH,IAAK,EACLC,OAAQ,GAEVG,cAAe,GAGoB,CACnCT,OAAQ,CACN,CACEC,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,YAEhJ,CACED,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBU,YAEjJ,CACED,QAAS,CAACT,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAEhJ,CACEF,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAEjJ,CACEF,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,YAGlJC,cAAe,CACbC,IAAK,EACLC,OAAQ,GAEVC,eAAgB,CACdF,IAAK,EACLC,OAAQ,GAEVE,gBAAiB,CACfH,IAAK,EACLC,OAAQ,GAEVG,cAAe,GAGoB,CACnCT,OAAQ,CACN,CACEC,QAAS,CAACT,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,YAEjJ,CACED,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBU,YAEjJ,CACED,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBW,WAEjJ,CACEF,QAAS,CAACT,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBW,SAAUX,EAAkBU,YAEjJ,CACED,QAAS,CAACT,EAAkBW,SAAUX,EAAkBW,SAAUX,EAAkBU,UAAWV,EAAkBU,UAAWV,EAAkBU,aAGlJE,cAAe,CACbC,IAAK,EACLC,OAAQ,GAEVC,eAAgB,CACdF,IAAK,EACLC,OAAQ,GAEVE,gBAAiB,CACfH,IAAK,EACLC,OAAQ,GAEVG,cAAe,IAKXC,EAAyB,CAC7BC,OAAQZ,EACRa,mBAAoB,EACpBC,MAAOd,EAAO,IAGVe,EAAqBC,YAAA,GAAQL,G,IEzLvBM,E,qECMNC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,UAAW,GACXC,SAAU,MAWDC,EAAiC,SAAHC,GAAgE,IAA1DC,EAAYD,EAAZC,aAAcC,EAAiBF,EAAjBE,kBAAmBC,EAAQH,EAARG,SAAUC,EAAOJ,EAAPI,QACpFC,EAAUX,IA+CVY,EAAmBL,IAAiBhC,EAAkBsC,eACtDC,EA/C2B,SAACC,GAChC,OAAQA,GACN,KAAKxC,EAAkByC,gBACrB,MAAO,CACLC,SAAU,mBACVC,MAAO,mBAEX,KAAK3C,EAAkBsC,eACrB,MAAO,CACLI,SAAU,mBACVC,MAAO,0BAEX,KAAK3C,EAAkBU,UACrB,MAAO,CACLgC,SAAU,mBACVC,MAAO,mBAEX,KAAK3C,EAAkBW,SACrB,MAAO,CACL+B,SAAU,gBACVC,MAAO,iBAEX,KAAK3C,EAAkB4C,cACrB,MAAO,CACLF,SAAU,uBACVC,MAAO,+BAEX,QACE,MAAO,CACLD,SAAU,mBACVC,MAAO,oBAiB0BE,CAAyBb,GAClE,OACEc,YAACC,IAAI,CAACC,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,eAAe,SAASC,QAAS,GACtFN,YAACC,IAAI,CAACM,MAAI,GACRP,YAACQ,IAAI,CACHX,MAAOJ,EAAaI,MACpBY,UACEnB,EAAQT,KACR,IACAY,EAAaG,UACZR,EAhBF,mCAgBoCC,EAbpC,qCAaoEF,EAnBpE,qCAHA,wCAyBDa,YAACU,IAAW,KACTvB,GAAqBa,YAAA,OAAKS,UAAU,SAASZ,MAAM,WACnDV,GAAqBI,GAAoBS,YAACW,IAAM,CAACd,MAAM,UAAUe,IAAKC,W,kCCjF7ElC,EAAYC,YAAW,CAC3BkC,aAAc,CACZC,UAAW,UAEbC,SAAU,CACRC,MAAO,OAMEC,EAA8C,SAAHjC,GAAyB,IAAnBkC,EAAWlC,EAAXkC,YACtD7B,EAAUX,IACVJ,EAAQ4C,EAAc,EAM5B,OACEnB,YAAA,OAAKS,UAAWnB,EAAQ0B,UACtBhB,YAACoB,IAAU,CAACC,QAAQ,KAAKZ,UAAWnB,EAAQwB,cAAc,UAChDvC,GAEVyB,YAACsB,IAAc,CAACD,QAAQ,cAAcE,MAVtB,SAAChD,GACnB,IACMiD,EAA4B,KAAbjD,EAAQ,IADVd,EAAOgE,OAAS,GAEnC,OAAOC,KAAKC,MAAMH,GAO6BI,CAAYT,OCvBzDxC,EAAYC,YAAW,CAC3BC,KAAM,CACJgD,UAAW,GACXC,aAAc,GACdC,QAAS,MAMAC,EAA6B,SAAH/C,GAAkD,IAA5CgD,EAAchD,EAAdgD,eAAgBC,EAAOjD,EAAPiD,QAASC,EAAWlD,EAAXkD,YAC9D7C,EAAUX,IAIVyD,EAAOF,EAAQG,QAAO,SAAAC,GAAC,OAAiB,IAAbA,EAAEC,UAAiBd,OAC9Ce,EAAQN,EAAQG,QAAO,SAAAC,GAAC,OAAiB,IAAbA,EAAEC,UAAkBd,OAQhDgB,EAAoBR,EAAiB,EAC3C,OACEjC,YAACC,IAAI,CAACC,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,eAAe,WAAWC,QAAS,GACxFN,YAACC,IAAI,CAACM,MAAI,GACRP,YAACQ,IAAI,CAACC,UAAWnB,EAAQT,KAARS,yCACfU,YAACU,IAAW,KACVV,YAACC,IAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,WAAW,SAASC,eAAe,SAASC,QAAS,GACnFN,YAACC,IAAI,CAACM,MAAI,GACRP,YAACoB,IAAU,CAACC,QAAQ,MAAK,UAE3BrB,YAACC,IAAI,CAACM,MAAI,GACRP,YAACoB,IAAU,CAACC,QAAQ,MAAK,SAAOe,GAChCpC,YAACoB,IAAU,CAACC,QAAQ,MAAK,UAAQmB,IAEnCxC,YAACC,IAAI,CAACM,MAAI,GACRP,YAACkB,EAAa,CAACC,YAAagB,KAE9BnC,YAACC,IAAI,CAACM,MAAI,GACPkC,GAAqBzC,YAACoB,IAAU,CAACC,QAAQ,MAAK,mBAC9CoB,GA1BE,SAACC,GAEhB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAQE,IAC1BD,EAAOE,KAAK7C,YAACW,IAAM,CAACC,IAAKkC,IAAUC,IAAK,aAAeH,KAEzD,OAAOD,EAqB2BK,CAASf,IAEjCjC,YAACC,IAAI,CAACM,MAAI,GACPkC,GAAqBR,EAAiB,GACrCjC,YAACiD,IAAM,CAAC5B,QAAQ,YAAY6B,MAAM,UAAUC,KAAK,8CAA8CC,OAAO,UAAS,oCC7C3HzE,EAAYC,YAAW,CAC3ByE,MAAO,CACLC,SAAU,SACVvB,QAAS,GACTwB,gBAAiB,WAEnBC,iBAAkB,CAChBC,WAAY,UACZC,OAAQ,oBACR5B,aAAc,IAEhB6B,UAAW,CACTD,OAAQ,UA0ECE,EAAuBC,aAtEZ,SAACC,GAAgB,MAAM,CAC7CpG,OAAQoG,EAAMvF,MAAMA,MAAMb,OAC1BQ,gBAAiB4F,EAAMvF,MAAMA,MAAML,gBACnCJ,cAAegG,EAAMvF,MAAMA,MAAMT,cACjCG,eAAgB6F,EAAMvF,MAAMA,MAAMN,eAClCiE,QAAS4B,EAAMC,MAAM7B,QACrB/D,cAAe2F,EAAMvF,MAAMA,MAAMJ,cACjCG,mBAAoBwF,EAAMvF,MAAMD,mBAChC2D,eAAgB6B,EAAME,KAAK/B,kBA8DgC,KAAzB4B,EAzDC,SAAH5E,GAS3B,IARLgD,EAAchD,EAAdgD,eACA3D,EAAkBW,EAAlBX,mBACAH,EAAac,EAAbd,cACAT,EAAMuB,EAANvB,OACAQ,EAAee,EAAff,gBACAJ,EAAamB,EAAbnB,cACAG,EAAcgB,EAAdhB,eACAiE,EAAOjD,EAAPiD,QAEM5C,EAAUX,IAChB,OACEqB,YAAA,WACEA,YAACgC,EAAS,CAACC,eAAgBA,EAAgBE,YAAa7D,EAAoB4D,QAASA,IACrFlC,YAACC,IAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,WAAW,SAASC,eAAe,SAASC,QAAS,GACnFN,YAACC,IAAI,CAACQ,UAAWnB,EAAQkE,iBAAkBjD,MAAI,GAC7CP,YAACoB,IAAU,CAACC,QAAQ,MAAK,eAAalD,EAAgB,EAAI,EAAIA,KAGlE6B,YAACiE,IAAc,CAACxD,UAAWnB,EAAQ+D,OACjCrD,YAACkE,IAAK,CAACC,aAAW,cAChBnE,YAACoE,IAAS,KACP1G,EAAO2G,KAAI,SAACtG,EAAKuG,GAChB,OACEtE,YAACuE,IAAQ,CAACxB,IAAK,YAAcuB,GAC1BvG,EAAIJ,QAAQ0G,KAAI,SAACrG,EAAQwG,GACxB,IAAItF,EAAelB,EACbmB,EAAoBjB,EAAgBH,MAAQuG,GAAOpG,EAAgBF,SAAWwG,EAC9EjF,EAAmBtB,EAAeF,MAAQuG,GAAOrG,EAAeD,SAAWwG,EAC3EC,EAAkB3G,EAAcC,MAAQuG,GAAOxG,EAAcE,SAAWwG,EACxEE,EAAiBzG,EAAeF,MAAQG,EAAgBH,KAAOE,EAAeD,SAAWE,EAAgBF,OACzG2G,EAAgBxG,EAAgB,EAUtC,OATIgB,IACFD,EAAehC,EAAkByC,iBAE/BJ,IACFL,EAAehC,EAAkBsC,gBAE/BiF,IACFvF,EAAehC,EAAkB4C,eAGjCE,YAAC4E,IAAS,CAACnE,UAAWnB,EAAQqE,UAAWZ,IAAK,eAAiByB,GAC7DxE,YAAChB,EAAa,CAACE,aAAcA,EAAcC,kBAAmBA,EAAmBC,SAAUsF,EAAgBrF,QAASsF,mB,8CJ3E3I,SAHWjG,KAAY,2CAAZA,EAAY,6CAGvB,CAHWA,MAAY,KAKjB,IAAMmG,EAAkB,SAACC,GAC9B,OAAO1H,EAAYsB,EAAaqG,kBAAmBD,IAe/CtG,EAAoBC,YAAA,GANI,CAC5BwD,eAAgB,EAChB6C,QACE,4NKbJ,IAIME,EAAqB,CAAEH,mBAyBhBI,EAAuBpB,aA7BZ,SAACC,GAAgB,MAAM,CAC7CgB,QAAShB,EAAME,KAAKc,WA4BuCE,EAAzBnB,EArBQ,SAAH5E,GAAsC,IAAhC6F,EAAO7F,EAAP6F,QAASD,EAAe5F,EAAf4F,gBAItD,OACE7E,YAACkF,IAAM,CAACC,KAAkB,KAAZL,EAAgBM,kBAAgB,2BAC5CpF,YAACqF,IAAW,KAAE,8BACdrF,YAACsF,IAAa,KACZtF,YAACuF,IAAiB,KAChBvF,YAAA,QAAMS,UAAU,uCAAuCqE,KAG3D9E,YAACwF,IAAa,KACZxF,YAACiD,IAAM,CAACwC,WAAS,EAACC,QAZJ,WAClBb,EAAgB,KAW4B3B,MAAM,WAAU,iBCxBnDyC,EAAsB,WACjC,OACE3F,YAAA4F,WAAA,KACE5F,YAAC4D,EAAoB,MACrB5D,YAACiF,EAAoB,Q,SCEZY,GANH,WAAH,OACP7F,YAAC8F,IAAS,CAACC,SAAS,MAClB/F,YAAC2F,EAAS,QCMMK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IChBMC,G,mBAEX,SAFWA,KAAa,8CAExB,CAFWA,QAAa,KAIlB,IAAMC,GAAgB,SAACC,GAC5B,OAAOnJ,EAAYiJ,GAAcG,mBAAoBD,IASjD/H,GAAqBC,YAAA,GAJI,CAC7ByD,QAAS,KCRJ,IAAMuE,GAAcC,aAAgB,CACzCnI,MZuLK,WAA0E,IAApDuF,EAAK6C,UAAAlF,OAAA,QAAAmF,IAAAD,UAAA,GAAAA,UAAA,GAAGnI,EAAWqI,EAAkBF,UAAAlF,OAAA,EAAAkF,UAAA,QAAAC,EAChE,OAAQC,EAAOxJ,MACb,KAAKF,EAAc2J,oBACjB,OAAArI,wBAAA,GACKqF,GAAK,IACRvF,MAAKE,wBAAA,GACAqF,EAAMvF,OAAK,IACdL,gBAAiB2I,EAAOvJ,YAG9B,KAAKH,EAAc4J,gCACjB,OAAAtI,wBAAA,GACKqF,GAAK,IACRvF,MAAKE,wBAAA,GACAqF,EAAMvF,OAAK,IACdJ,cAAe2F,EAAMvF,MAAMJ,cAAgB,MAGjD,KAAKhB,EAAc6J,qBACjB,OAAAvI,wBAAA,GACKqF,GAAK,IACRvF,MAAKE,wBAAA,GACAqF,EAAMvF,OAAK,IACdL,gBAAiB2I,EAAOvJ,YAG9B,KAAKH,EAAc8J,YACjB,OAAAxI,wBAAA,GACKqF,GAAK,IACRxF,mBAAoBuI,EAAOvJ,QAC3BiB,MAAOd,EAAOoJ,EAAOvJ,WAEzB,KAAKH,EAAcK,uBACjB,OAAAiB,YAAA,GACKL,GAEP,QACE,OAAO0F,IY3NXC,MDWK,WAA2E,IAArDD,EAAK6C,UAAAlF,OAAA,QAAAmF,IAAAD,UAAA,GAAAA,UAAA,GAAGnI,GAAWqI,EAAmBF,UAAAlF,OAAA,EAAAkF,UAAA,QAAAC,EACjE,OAAQC,EAAOxJ,MACb,KAAKgJ,GAAcG,mBACjB,OAAA/H,wBAAA,GACKqF,GAAK,IACR5B,QAAQ,GAADgF,OAAAC,aAAMrD,EAAM5B,SAAO,CAAE2E,EAAOvJ,YAEvC,QACE,OAAOwG,IClBXE,KViBK,WAAwE,IAAnDF,EAAK6C,UAAAlF,OAAA,QAAAmF,IAAAD,UAAA,GAAAA,UAAA,GAAGnI,EAAWqI,EAAkBF,UAAAlF,OAAA,EAAAkF,UAAA,QAAAC,EAC/D,OAAQC,EAAOxJ,MACb,KAAKqB,EAAaqG,kBAChB,OAAAtG,wBAAA,GACKqF,GAAK,IACRgB,QAAS+B,EAAOvJ,UAEpB,KAAKoB,EAAa0I,mBAChB,OAAA3I,wBAAA,GACKqF,GAAK,IACR7B,eAAgB6B,EAAM7B,eAAiB,IAE3C,QACE,OAAO6B,MWnCPuD,GAAoBpB,OAAeqB,sCAAwCC,KACpEC,GAAQC,aAAYhB,GAAaY,MCEjCK,GAAyB,SAACC,EAA8BzJ,EAAqCR,GACxG,IAAIkK,EACEC,EAAYnK,EAAO+D,OAAS,EAC5BqG,EAAYpK,EAAO,GAAGC,QAAQ8D,OAAS,EACvCsG,EAAa,SAACC,GAElB,OADsBtK,EAAOsK,EAAajK,KAAKJ,QAAQqK,EAAahK,UAC3Cd,EAAkBW,UAQvCoK,EAAwB,SAACD,GAC7B,OAP4B,SAACA,GAC7B,OAAOA,EAAahK,QAAU,GAAKgK,EAAahK,QAAU8J,EAMnDI,CAAsBF,KAAkBD,EAAWC,IAEtDG,EAAqB,SAACH,GAC1B,OAPyB,SAACA,GAC1B,OAAOA,EAAajK,KAAO,GAAKiK,EAAajK,KAAO8J,EAM7CO,CAAmBJ,KAAkBD,EAAWC,IAEzD,OAAQL,EAAcU,SACpB,KAAKpL,EAAiBqL,MACpB,IAAMC,EAAwC,CAC5CxK,IAAKG,EAAgBH,IACrBC,OAAQE,EAAgBF,OAAS,GAEnC4J,EAAeK,EAAsBM,GAAqBA,EAAoBrK,EAC9E,MACF,KAAKjB,EAAiBuL,KACpB,IAAMC,EAAuC,CAC3C1K,IAAKG,EAAgBH,IACrBC,OAAQE,EAAgBF,OAAS,GAEnC4J,EAAeK,EAAsBQ,GAAoBA,EAAmBvK,EAC5E,MACF,KAAKjB,EAAiByL,KACpB,IAAMC,EAAuC,CAC3C5K,IAAKG,EAAgBH,IAAM,EAC3BC,OAAQE,EAAgBF,QAE1B4J,EAAeO,EAAmBQ,GAAoBA,EAAmBzK,EACzE,MACF,KAAKjB,EAAiB2L,GACpB,IAAMC,EAAqC,CACzC9K,IAAKG,EAAgBH,IAAM,EAC3BC,OAAQE,EAAgBF,QAE1B4J,EAAeO,EAAmBU,GAAkBA,EAAiB3K,EACrE,MACF,QACE0J,EAAe1J,EAEnB,OAAO0J,GAGIkB,GAAe,SAAC3G,GAE3B,OAAOA,EAAc,GADD1E,EAAOgE,OAAS,GClDtCwE,OAAO8C,iBAAiB,WAAW,SAAAC,GACjC,GDXkCrB,ECWVqB,EDVjBC,OAAOC,OAAOjM,GAAkBkM,SAASxB,EAAcU,SCU9B,CAC9B,IAAMnK,EAAkBsJ,GAAM4B,WAAW7K,MAAMA,MAAML,gBAC/CR,EAAS8J,GAAM4B,WAAW7K,MAAMA,MAAMb,OACtCO,EAAiBuJ,GAAM4B,WAAW7K,MAAMA,MAAMN,eAC9CE,EAAgBqJ,GAAM4B,WAAW7K,MAAMA,MAAMJ,cAC7CG,EAAqBkJ,GAAM4B,WAAW7K,MAAMD,mBAC5C0J,EAAmCN,GAAuBsB,EAAO9K,EAAiBR,GAGxF,GAFgBsK,EAAahK,SAAWE,EAAgBF,QAAUgK,EAAajK,MAAQG,EAAgBH,IAE1F,CACXyJ,GAAM6B,SfmBHjM,EAAYD,EAAc4J,gCAAiC,OelB9DS,GAAM6B,UfSiB3J,EeTKsI,EfUzB5K,EAAYD,EAAc6J,qBAAsBtH,KeTnD,IAAMgF,EAAiBzG,EAAeF,MAAQiK,EAAajK,KAAOE,EAAeD,SAAWgK,EAAahK,OACnFG,EAAgB,GAEpCmL,YAAW,WACT9B,GAAM6B,SACJ/C,GAAc,CACZnI,cAAeA,EACfoE,QAAQ,KAGZiF,GAAM6B,SAASxE,EAAgB,oCAC/B2C,GAAM6B,SAAS9L,OACd,MAEDmH,GACF4E,YAAW,WD0Be,IAACnH,ECzBzBqF,GAAM6B,SACJ/C,GAAc,CACZnI,cAAeA,EACfoE,QAAQ,KAGRuG,GAAaxK,IACfkJ,GAAM6B,SAASxE,EAAgB,wCAC/B2C,GAAM6B,SfxBO,SAAClH,GACxB,OAAO/E,EAAYD,EAAc8J,YAAa9E,GeuBrBoH,CDkBlBT,GAD0B3G,ECjBqB7D,GDkBnB6D,EAAc,EAAI,MChB3CqF,GAAM6B,SAASxE,EAAgB,mHAC/B2C,GAAM6B,SbxCTjM,EAAYsB,EAAa0I,mBAAoB,OayC1CI,GAAM6B,SAAS9L,QAEhB,OftBiB,IAACmC,Ec/BOiI,KC2DpC6B,IAASC,OACPzJ,YAAC0J,IAAQ,CAAClC,MAAOA,IACfxH,YAAC6F,GAAG,OAEN8D,SAASC,eAAe,SL0EpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtF,c","file":"static/js/main.1117c519.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/diamond.c0838d86.jpg\";","module.exports = __webpack_public_path__ + \"static/media/star.1d176004.jpg\";","import { typedAction } from '../helpers';\n\nexport enum KEYBOARD_SUPPORT {\n  left = 37,\n  up = 38,\n  right = 39,\n  down = 40\n}\n\nexport enum POSITION_ROW_TYPE {\n  obstacle = 1,\n  freeSpace = 0,\n  finishPosition = 2,\n  currentPosition = 3,\n  startPosition = 4\n}\n\nexport enum LEVEL_ACTIONS {\n  RESTART_TO_FIRST_LEVEL = 'level/RESTART_TO_FIRST_LEVEL',\n  GO_TO_LEVEL = 'level/GO_TO_LEVEL',\n  MOVE_PLAYER_LOCATION = 'level/MOVE_PLAYER_LOCATION',\n  SET_PLAYER_LOCATION = 'level/SET_PLAYER_LOCATION',\n  DECREMENT_PLAYER_LEFT_MOVEMENTS = 'level/DECREMENT_PLAYER_LEFT_MOVEMENTS'\n}\n\nexport const goToLevel = (levelNumber: number) => {\n  return typedAction(LEVEL_ACTIONS.GO_TO_LEVEL, levelNumber);\n};\n\nexport const restartToFirstLevel = () => {\n  return typedAction(LEVEL_ACTIONS.RESTART_TO_FIRST_LEVEL, null);\n};\n\nexport const movePosition = (position: CoordinatePosition) => {\n  return typedAction(LEVEL_ACTIONS.MOVE_PLAYER_LOCATION, position);\n};\n\nexport const setPosition = (position: CoordinatePosition) => {\n  return typedAction(LEVEL_ACTIONS.SET_PLAYER_LOCATION, position);\n};\n\nexport const decrementLeftMovements = () => {\n  return typedAction(LEVEL_ACTIONS.DECREMENT_PLAYER_LEFT_MOVEMENTS, null);\n};\n\ntype UserAction = ReturnType<typeof setPosition | typeof decrementLeftMovements | typeof movePosition | typeof restartToFirstLevel | typeof goToLevel>;\n\nexport const LEVEL_1_CONFIG: Level = {\n  matrix: [\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace]\n    }\n  ],\n  startLocation: {\n    row: 0,\n    column: 0\n  },\n  finishLocation: {\n    row: 4,\n    column: 4\n  },\n  currentLocation: {\n    row: 0,\n    column: 0\n  },\n  leftMovements: 10\n};\n\nexport const LEVEL_2_CONFIG: Level = {\n  matrix: [\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace]\n    }\n  ],\n  startLocation: {\n    row: 0,\n    column: 4\n  },\n  finishLocation: {\n    row: 3,\n    column: 1\n  },\n  currentLocation: {\n    row: 0,\n    column: 4\n  },\n  leftMovements: 9\n};\n\nexport const LEVEL_3_CONFIG: Level = {\n  matrix: [\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle]\n    }\n  ],\n  startLocation: {\n    row: 0,\n    column: 4\n  },\n  finishLocation: {\n    row: 2,\n    column: 1\n  },\n  currentLocation: {\n    row: 0,\n    column: 4\n  },\n  leftMovements: 8\n};\n\nexport const LEVEL_4_CONFIG: Level = {\n  matrix: [\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace]\n    },\n    {\n      columns: [POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.obstacle, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace, POSITION_ROW_TYPE.freeSpace]\n    }\n  ],\n  startLocation: {\n    row: 0,\n    column: 4\n  },\n  finishLocation: {\n    row: 0,\n    column: 0\n  },\n  currentLocation: {\n    row: 0,\n    column: 4\n  },\n  leftMovements: 7\n};\n\nexport const LEVELS = [LEVEL_1_CONFIG, LEVEL_2_CONFIG, LEVEL_3_CONFIG, LEVEL_4_CONFIG];\n\nconst startState: LevelStore = {\n  levels: LEVELS,\n  currentLevelNumber: 0,\n  level: LEVELS[0]\n};\n\nconst initState: LevelStore = { ...startState };\n\nexport function levelReducer(state = initState, action: UserAction): LevelStore {\n  switch (action.type) {\n    case LEVEL_ACTIONS.SET_PLAYER_LOCATION:\n      return {\n        ...state,\n        level: {\n          ...state.level,\n          currentLocation: action.payload\n        }\n      };\n    case LEVEL_ACTIONS.DECREMENT_PLAYER_LEFT_MOVEMENTS:\n      return {\n        ...state,\n        level: {\n          ...state.level,\n          leftMovements: state.level.leftMovements - 1\n        }\n      };\n    case LEVEL_ACTIONS.MOVE_PLAYER_LOCATION:\n      return {\n        ...state,\n        level: {\n          ...state.level,\n          currentLocation: action.payload\n        }\n      };\n    case LEVEL_ACTIONS.GO_TO_LEVEL:\n      return {\n        ...state,\n        currentLevelNumber: action.payload,\n        level: LEVELS[action.payload]\n      };\n    case LEVEL_ACTIONS.RESTART_TO_FIRST_LEVEL:\n      return {\n        ...startState\n      };\n    default:\n      return state;\n  }\n}\n","export function typedAction<T extends string>(type: T): { type: T };\nexport function typedAction<T extends string, P extends any>(\n  type: T,\n  payload: P\n): { type: T; payload: P };\nexport function typedAction(type: string, payload?: any) {\n  return { type, payload };\n}\n","import { typedAction } from '../helpers';\n\nexport enum GAME_ACTIONS {\n  SET_LEVEL_MESSAGE = 'game/SET_LEVEL_MESSAGE',\n  ADD_COMPLETED_GAME = 'game/ADD_COMPLETED_GAME'\n}\n\nexport const setMessageLevel = (message: string) => {\n  return typedAction(GAME_ACTIONS.SET_LEVEL_MESSAGE, message);\n};\n\nexport const addCompletedGame = () => {\n  return typedAction(GAME_ACTIONS.ADD_COMPLETED_GAME, null);\n};\n\ntype GameAction = ReturnType<typeof setMessageLevel | typeof addCompletedGame>;\n\nconst startState: GameStore = {\n  completedGames: 0,\n  message:\n    'Hey welcome to the party!, play the game using the arrows of your keyboard. Your objective is to move batman from the initial position and find the diamond in the cave before you run out of moves. Good luck batman!!'\n};\n\nconst initState: GameStore = { ...startState };\n\nexport function gameReducer(state = initState, action: GameAction): GameStore {\n  switch (action.type) {\n    case GAME_ACTIONS.SET_LEVEL_MESSAGE:\n      return {\n        ...state,\n        message: action.payload\n      };\n    case GAME_ACTIONS.ADD_COMPLETED_GAME:\n      return {\n        ...state,\n        completedGames: state.completedGames + 1\n      };\n    default:\n      return state;\n  }\n}\n","import * as React from 'react';\nimport { POSITION_ROW_TYPE } from '../redux/reducers/level';\nimport { Avatar, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport 'animate.css';\nimport '../assets/batman.scss';\nimport '../assets/terrain.scss';\nimport diamond from '../assets/diamond.jpg';\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: 80,\n    minWidth: 80\n  }\n});\n\ntype PositionConfigInfo = {\n  classCss: string;\n  title: string;\n};\n\ntype Props = { positionType: POSITION_ROW_TYPE; isCurrentPosition: boolean; isWinner: boolean; isLoser: boolean };\n\nexport const PositionBlock: React.FC<Props> = ({ positionType, isCurrentPosition, isWinner, isLoser }) => {\n  const classes = useStyles();\n  const getStyleAndTitlePosition = (position: POSITION_ROW_TYPE): PositionConfigInfo => {\n    switch (position) {\n      case POSITION_ROW_TYPE.currentPosition:\n        return {\n          classCss: 'free-space-grass',\n          title: 'Free space path'\n        };\n      case POSITION_ROW_TYPE.finishPosition:\n        return {\n          classCss: 'free-space-grass',\n          title: 'Finish position target'\n        };\n      case POSITION_ROW_TYPE.freeSpace:\n        return {\n          classCss: 'free-space-grass',\n          title: 'Free space path'\n        };\n      case POSITION_ROW_TYPE.obstacle:\n        return {\n          classCss: 'obstacle-wall',\n          title: 'Obstacle path'\n        };\n      case POSITION_ROW_TYPE.startPosition:\n        return {\n          classCss: 'star-position-castle',\n          title: 'Castle in starting position'\n        };\n      default:\n        return {\n          classCss: 'free-space-grass',\n          title: 'Free space path'\n        };\n    }\n  };\n  const getEntranceAnimation = () => {\n    return ' animate__animated animate__flipInY';\n  };\n  const getMoveAnimation = () => {\n    return ' animate__animated animate__bounce';\n  };\n  const getWinnerAnimation = () => {\n    return ' animate__animated animate__flip';\n  };\n  const getLoserAnimation = () => {\n    return ' animate__animated animate__shakeX';\n  };\n  const isFinishPosition = positionType === POSITION_ROW_TYPE.finishPosition;\n  const positionInfo: PositionConfigInfo = getStyleAndTitlePosition(positionType);\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\n      <Grid item>\n        <Card\n          title={positionInfo.title}\n          className={\n            classes.root +\n            ' ' +\n            positionInfo.classCss +\n            (isWinner ? getWinnerAnimation() : isLoser ? getLoserAnimation() : isCurrentPosition ? getMoveAnimation() : getEntranceAnimation())\n          }\n        >\n          <CardContent>\n            {isCurrentPosition && <div className=\"batman\" title=\"Batman\" />}\n            {isCurrentPosition && isFinishPosition && <Avatar title=\"Diamond\" src={diamond} />}\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n","import * as React from 'react';\nimport { LinearProgress, makeStyles, Typography } from '@material-ui/core';\nimport 'animate.css';\nimport { LEVELS } from '../redux/reducers/level';\n\nconst useStyles = makeStyles({\n  currentLevel: {\n    textAlign: 'center'\n  },\n  boxLevel: {\n    width: 190\n  }\n});\ntype PropsProgressLabel = {\n  currenLevel: number;\n};\nexport const LevelProgress: React.FC<PropsProgressLabel> = ({ currenLevel }) => {\n  const classes = useStyles();\n  const level = currenLevel + 1;\n  const getProgress = (level: number) => {\n    const levelLimit = LEVELS.length + 1;\n    const difference = ((level + 1) * 100) / levelLimit;\n    return Math.round(difference);\n  };\n  return (\n    <div className={classes.boxLevel}>\n      <Typography variant=\"h4\" className={classes.currentLevel}>\n        Level: {level}\n      </Typography>\n      <LinearProgress variant=\"determinate\" value={getProgress(currenLevel)} />\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { Avatar, Button, Card, CardContent, Grid, makeStyles, Typography } from '@material-ui/core';\nimport 'animate.css';\nimport starIcon from '../assets/star.jpg';\nimport { LevelProgress } from './LevelProgress';\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: 10,\n    marginBottom: 50,\n    padding: 20\n  }\n});\n\ntype Props = { completedGames: number; levelNumber: number; results: ResultGame[] };\n\nexport const ScoreInfo: React.FC<Props> = ({ completedGames, results, levelNumber }) => {\n  const classes = useStyles();\n  const getEntranceAnimation = () => {\n    return ' animate__animated animate__bounceIn';\n  };\n  const wins = results.filter(r => r.winner === true).length;\n  const loses = results.filter(r => r.winner === false).length;\n  const getStars = (amount: number) => {\n    let starts = [];\n    for (let i = 0; i < amount; i++) {\n      starts.push(<Avatar src={starIcon} key={'completed-' + i} />);\n    }\n    return starts;\n  };\n  const hasCompletedGames = completedGames > 0;\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"flex-end\" spacing={2}>\n      <Grid item>\n        <Card className={classes.root + ' ' + getEntranceAnimation()}>\n          <CardContent>\n            <Grid container direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={8}>\n              <Grid item>\n                <Typography variant=\"h3\">Score</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"h6\">Wins: {wins}</Typography>\n                <Typography variant=\"h6\">Loses: {loses}</Typography>\n              </Grid>\n              <Grid item>\n                <LevelProgress currenLevel={levelNumber} />\n              </Grid>\n              <Grid item>\n                {hasCompletedGames && <Typography variant=\"h6\">Completed games</Typography>}\n                {hasCompletedGames && getStars(completedGames)}\n              </Grid>\n              <Grid item>\n                {hasCompletedGames && completedGames > 0 && (\n                  <Button variant=\"contained\" color=\"primary\" href=\"https://www.youtube.com/watch?v=v2YlMWr-zO0\" target=\"_blank\">\n                    CLICK BECAUSE I'M BATMAN!\n                  </Button>\n                )}\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n","import * as React from 'react';\nimport { RootState } from '../redux/reducers';\nimport { connect } from 'react-redux';\nimport { Grid, makeStyles, Table, TableBody, TableCell, TableContainer, TableRow, Typography } from '@material-ui/core';\nimport { PositionBlock } from './PositionBlock';\nimport { POSITION_ROW_TYPE } from '../redux/reducers/level';\nimport { ScoreInfo } from './ScoreInfo';\n\nconst useStyles = makeStyles({\n  table: {\n    overflow: 'hidden',\n    padding: 20,\n    backgroundColor: '#160c32'\n  },\n  movesLeftSection: {\n    background: '#ffffff',\n    border: 'solid 3px #000000',\n    marginBottom: 10\n  },\n  tableCell: {\n    border: 'none'\n  }\n});\n\nconst mapStateToProps = (state: RootState) => ({\n  matrix: state.level.level.matrix,\n  currentLocation: state.level.level.currentLocation,\n  startLocation: state.level.level.startLocation,\n  finishLocation: state.level.level.finishLocation,\n  results: state.score.results,\n  leftMovements: state.level.level.leftMovements,\n  currentLevelNumber: state.level.currentLevelNumber,\n  completedGames: state.game.completedGames\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst LevelDrawer: React.FC<Props> = ({\n  completedGames,\n  currentLevelNumber,\n  leftMovements,\n  matrix,\n  currentLocation,\n  startLocation,\n  finishLocation,\n  results\n}) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <ScoreInfo completedGames={completedGames} levelNumber={currentLevelNumber} results={results} />\n      <Grid container direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\n        <Grid className={classes.movesLeftSection} item>\n          <Typography variant=\"h5\">Moves left: {leftMovements < 0 ? 0 : leftMovements}</Typography>\n        </Grid>\n      </Grid>\n      <TableContainer className={classes.table}>\n        <Table aria-label=\"game table\">\n          <TableBody>\n            {matrix.map((row, idx) => {\n              return (\n                <TableRow key={'row-area-' + idx}>\n                  {row.columns.map((column, idx2) => {\n                    let positionType = column;\n                    const isCurrentPosition = currentLocation.row === idx && currentLocation.column === idx2;\n                    const isFinishPosition = finishLocation.row === idx && finishLocation.column === idx2;\n                    const isStartPosition = startLocation.row === idx && startLocation.column === idx2;\n                    const isWinnerPlayer = finishLocation.row === currentLocation.row && finishLocation.column === currentLocation.column;\n                    const isLoserPlayer = leftMovements < 1;\n                    if (isCurrentPosition) {\n                      positionType = POSITION_ROW_TYPE.currentPosition;\n                    }\n                    if (isFinishPosition) {\n                      positionType = POSITION_ROW_TYPE.finishPosition;\n                    }\n                    if (isStartPosition) {\n                      positionType = POSITION_ROW_TYPE.startPosition;\n                    }\n                    return (\n                      <TableCell className={classes.tableCell} key={'column-area-' + idx2}>\n                        <PositionBlock positionType={positionType} isCurrentPosition={isCurrentPosition} isWinner={isWinnerPlayer} isLoser={isLoserPlayer} />\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport const LevelDrawerContainer = connect(mapStateToProps, null)(LevelDrawer);\n","import * as React from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\nimport 'animate.css';\nimport { RootState } from '../redux/reducers';\nimport { connect } from 'react-redux';\nimport { setMessageLevel } from '../redux/reducers/game';\n\nconst mapStateToProps = (state: RootState) => ({\n  message: state.game.message\n});\n\nconst mapDispatchToProps = { setMessageLevel };\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\nexport const MessageGame: React.FC<Props> = ({ message, setMessageLevel }) => {\n  const handleClose = () => {\n    setMessageLevel('');\n  };\n  return (\n    <Dialog open={message !== ''} aria-labelledby=\"responsive-dialog-title\">\n      <DialogTitle>{'Labyrinth - Batman version'}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          <span className=\"animate__animated animate__bounceIn\">{message}</span>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleClose} color=\"primary\">\n          Continue\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport const MessageGameContainer = connect(mapStateToProps, mapDispatchToProps)(MessageGame);\n","import * as React from 'react';\nimport { LevelDrawerContainer } from './LevelDrawer';\nimport { MessageGameContainer } from './MessageGame';\n\nexport const Labyrinth: React.FC = () => {\n  return (\n    <>\n      <LevelDrawerContainer />\n      <MessageGameContainer />\n    </>\n  );\n};\n","import React from 'react';\nimport { Labyrinth } from './components/Labyrinth';\nimport { Container } from '@material-ui/core';\n\nconst App = () => (\n  <Container maxWidth=\"md\">\n    <Labyrinth />\n  </Container>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { typedAction } from '../helpers';\n\nexport enum SCORE_ACTIONS {\n  ADD_PLAYER_RESULTS = 'score/ADD_PLAYER_RESULTS'\n}\n\nexport const addResultGame = (result: ResultGame) => {\n  return typedAction(SCORE_ACTIONS.ADD_PLAYER_RESULTS, result);\n};\n\ntype ScoreAction = ReturnType<typeof addResultGame>;\n\nconst startState: ScoreStore = {\n  results: []\n};\n\nconst initState: ScoreStore = { ...startState };\n\nexport function scoreReducer(state = initState, action: ScoreAction): ScoreStore {\n  switch (action.type) {\n    case SCORE_ACTIONS.ADD_PLAYER_RESULTS:\n      return {\n        ...state,\n        results: [...state.results, action.payload]\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { levelReducer } from './level';\nimport { scoreReducer } from './score';\nimport { gameReducer } from './game';\n\nexport const rootReducer = combineReducers({\n  level: levelReducer,\n  score: scoreReducer,\n  game: gameReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { compose, createStore } from 'redux';\nimport { rootReducer } from '../reducers';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, composeEnhancers());\n","import { KEYBOARD_SUPPORT, LEVELS, POSITION_ROW_TYPE } from './redux/reducers/level';\n\nexport const isSupportedMovement = (keyboardEvent: KeyboardEvent) => {\n  return Object.values(KEYBOARD_SUPPORT).includes(keyboardEvent.keyCode);\n};\n\nexport const getNewPositionMovement = (keyboardEvent: KeyboardEvent, currentLocation: CoordinatePosition, matrix: RowLevel[]) => {\n  let nextPosition: CoordinatePosition;\n  const limitRows = matrix.length - 1;\n  const limitCols = matrix[0].columns.length - 1;\n  const isObstacle = (nextLocation: CoordinatePosition) => {\n    const levelLocation = matrix[nextLocation.row].columns[nextLocation.column];\n    return levelLocation === POSITION_ROW_TYPE.obstacle;\n  };\n  const isOnColumnLevelLimits = (nextLocation: CoordinatePosition) => {\n    return nextLocation.column > -1 && nextLocation.column <= limitCols;\n  };\n  const isOnRowLevelLimits = (nextLocation: CoordinatePosition) => {\n    return nextLocation.row > -1 && nextLocation.row <= limitRows;\n  };\n  const isValidColumnMovement = (nextLocation: CoordinatePosition) => {\n    return isOnColumnLevelLimits(nextLocation) && !isObstacle(nextLocation);\n  };\n  const isValidRowMovement = (nextLocation: CoordinatePosition) => {\n    return isOnRowLevelLimits(nextLocation) && !isObstacle(nextLocation);\n  };\n  switch (keyboardEvent.keyCode) {\n    case KEYBOARD_SUPPORT.right:\n      const nextRightLocation: CoordinatePosition = {\n        row: currentLocation.row,\n        column: currentLocation.column + 1\n      };\n      nextPosition = isValidColumnMovement(nextRightLocation) ? nextRightLocation : currentLocation;\n      break;\n    case KEYBOARD_SUPPORT.left:\n      const nextLeftLocation: CoordinatePosition = {\n        row: currentLocation.row,\n        column: currentLocation.column - 1\n      };\n      nextPosition = isValidColumnMovement(nextLeftLocation) ? nextLeftLocation : currentLocation;\n      break;\n    case KEYBOARD_SUPPORT.down:\n      const nextDownLocation: CoordinatePosition = {\n        row: currentLocation.row + 1,\n        column: currentLocation.column\n      };\n      nextPosition = isValidRowMovement(nextDownLocation) ? nextDownLocation : currentLocation;\n      break;\n    case KEYBOARD_SUPPORT.up:\n      const nextUpLocation: CoordinatePosition = {\n        row: currentLocation.row - 1,\n        column: currentLocation.column\n      };\n      nextPosition = isValidRowMovement(nextUpLocation) ? nextUpLocation : currentLocation;\n      break;\n    default:\n      nextPosition = currentLocation;\n  }\n  return nextPosition;\n};\n\nexport const hasNextLevel = (levelNumber: number) => {\n  const limitLevels = LEVELS.length - 1;\n  return levelNumber + 1 <= limitLevels;\n};\n\nexport const getNextLevelNumber = (levelNumber: number) => {\n  return hasNextLevel(levelNumber) ? levelNumber + 1 : 0;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store/configureStore';\nimport { getNewPositionMovement, getNextLevelNumber, hasNextLevel, isSupportedMovement } from './utils';\nimport { decrementLeftMovements, goToLevel, movePosition, restartToFirstLevel } from './redux/reducers/level';\nimport { addResultGame } from './redux/reducers/score';\nimport { addCompletedGame, setMessageLevel } from './redux/reducers/game';\n\nwindow.addEventListener('keydown', event => {\n  if (isSupportedMovement(event)) {\n    const currentLocation = store.getState().level.level.currentLocation;\n    const matrix = store.getState().level.level.matrix;\n    const finishLocation = store.getState().level.level.finishLocation;\n    const leftMovements = store.getState().level.level.leftMovements;\n    const currentLevelNumber = store.getState().level.currentLevelNumber;\n    const nextLocation: CoordinatePosition = getNewPositionMovement(event, currentLocation, matrix);\n    const isMoved = nextLocation.column !== currentLocation.column || nextLocation.row !== currentLocation.row;\n\n    if (isMoved) {\n      store.dispatch(decrementLeftMovements());\n      store.dispatch(movePosition(nextLocation));\n      const isWinnerPlayer = finishLocation.row === nextLocation.row && finishLocation.column === nextLocation.column;\n      const isLoserPlayer = leftMovements < 2;\n      if (isLoserPlayer) {\n        setTimeout(() => {\n          store.dispatch(\n            addResultGame({\n              leftMovements: leftMovements,\n              winner: false\n            })\n          );\n          store.dispatch(setMessageLevel('You lose but you can try again.'));\n          store.dispatch(restartToFirstLevel());\n        }, 1500);\n      }\n      if (isWinnerPlayer) {\n        setTimeout(() => {\n          store.dispatch(\n            addResultGame({\n              leftMovements: leftMovements,\n              winner: true\n            })\n          );\n          if (hasNextLevel(currentLevelNumber)) {\n            store.dispatch(setMessageLevel('You win! keep playing all day long.'));\n            store.dispatch(goToLevel(getNextLevelNumber(currentLevelNumber)));\n          } else {\n            store.dispatch(setMessageLevel('Congratulations now Batman have all the diamonds and is more richer!!. You can star again and break records :D'));\n            store.dispatch(addCompletedGame());\n            store.dispatch(restartToFirstLevel());\n          }\n        }, 1500);\n      }\n    }\n  }\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}